n = 386931010476066075837968435835568572278162262133897268076172926477773222237770106161904290022544637634198443777989318861346776496147456733417801969323559935547762053140311065149570645042679207282163944764258457818336874606186063312212223286995796662956880884390624903779609227558663952294861600483773641805524656787990883017538007871813015279849974842810524387541576499325580716200722985825884806159228713614036698970897017484020439048399276917685918470357385648137307211493845078192550112457897553375871556074252744253633037568961352527728436056302534978263323170336240030950585991108197098692769976160890567250487423

# ↓pの範囲を求めるために使ったコード
# lo = 1
# hi = 2 ** 1024
# while hi - lo > 1
# 	mid = (lo + hi) / 2
# 	if mid * 19 * mid > n
# 		hi = mid
# 	else
# 		lo = mid
# 	end
# end
# puts lo

# lo = 1
# while hi - lo > 1
# 	mid = (lo + hi) / 2
# 	if mid * (19 * mid + 2 ** 512) >= n
# 		hi = mid
# 	else
# 		lo = mid
# 	end
# end
# puts hi

def extgcd(a,b)
  return [1,0] if b == 0
  y,x = extgcd(b, a % b)
  y -= (a/b)*x
  return [x,y]
end

def mod_inverse(a, mod)
  x,y = extgcd(a, mod)
  return x % mod
end

def mod_pow(a, n, mod)
  ret = 1
  while n > 0
    ret = (ret * a) % mod if n.odd?
    a = (a * a) % mod
    n >>= 1
  end
  ret
end

p = 142705255772364982838516531715718191640815441800236739365553038697417755590297275781522823491205105009501621401991866858062431379476890096993289842661379657047660611410332884726411582639930579067910778903846240476718035804927284356419622551632474819703665434429043509042542224222926361726591058189025941965577
q = n / p
e = 65537
d = mod_inverse(e, (p - 1) * (q - 1))

enc = 238128932536965734026453335534508678486770867304645614119195536048961186128744314667991999168452564298994773996973787655358503271491181214369796509942047091225518293577154563021214085132019889288510474458242494876257330038265066123460887568813277411779817556316602871932730284368524299559699693787556478631297630514938453794107136748994144175123917418701679413905695916367530746728699301383100433069740863537869450361306987480687067608102552418211244703552910903168179094472596152349098076535870469807035136435631458879919434041758274344589567529971195683495146426258135341109919085270442486183365562919531353370683625
flag = mod_pow(enc, d, n).to_s(16)
puts flag
puts(0.step(flag.size, 2).map do |i|
	flag[i, 2].to_i(16).chr
end.join)